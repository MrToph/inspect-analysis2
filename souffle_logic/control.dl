#include "input.dl"
#include "CFGDom.dl"

#if DEBUG
	.output IfElse
	.output Merge
	.output FuncEntry
	.output BasicBlockBegin
	.output NextInSameBasicBlock
	.output BasicBlockHead
	.output BBInFunc
	.output BasicBlockEnd
	.output NextBasicBlock
	.output LastBB
	.output NotDominateBB
	.output DominateBB
	.output ReachableInBB
#endif

// Filtered follows without dead path(e.g. follows after br)
.decl Follows(prev: Insn, to: Insn)

Follows(prev, to):-
	_Follows(prev, to),
	!_Goto(prev, _),
	!_BranchTable(prev, _, _).



.decl IfElse(from: Insn, to: Insn)

// cond
IfElse(if, to):-
	_Branch(if, to, _, _);
	_Branch(if, _, to, _).

// table
IfElse(if, to):-
	_BranchTable(if, to, _).



.decl Merge(merge: Insn)

// uncond
Merge(merge):-
	_Goto(_, merge).

//cond
Merge(merge):-
	_EndIf(_, merge).

// table merge
Merge(merge):-
	_BranchTable(_, merge, _).



// function defintion
.decl FuncEntry(func: Function, firstInsn: Insn)

FuncEntry(func, insn):-
	_FormalArgs(insn, func, _, _).



.decl BasicBlockBegin(begin: Insn)

// begin of function,
BasicBlockBegin(insn):-
	FuncEntry(_, insn).

// If/Else block
BasicBlockBegin(insn):-
	IfElse(_, insn).

// Merge block
BasicBlockBegin(insn):-
	Merge(insn).



.decl NextInSameBasicBlock(insn: Insn, next: Insn)

// BB: 1 -> 2 -> 3

// 1, 2
// 2, 3
NextInSameBasicBlock(insn, next):-
	Follows(insn, next),
	!BasicBlockBegin(next).



// insn belongs to a basic block with head 
.decl BasicBlockHead(head: Insn, insn: Insn)

// 1, 1
// 1, 2
// 1, 3
BasicBlockHead(insn, insn):-
	BasicBlockBegin(insn).

BasicBlockHead(head, next) :-
   BasicBlockHead(head, insn),
   NextInSameBasicBlock(insn, next).



.decl BasicBlockEnd(end: Insn)

// 3
BasicBlockEnd(end):-
	BasicBlockHead(_, end),
	!NextInSameBasicBlock(end, _).



.decl NextBasicBlock(prev: Insn, next: Insn)

// Assuming If/Else is the only the only control transfer in a function
// Constructing CFG of basic blocks
// BB1: 1 -> 2(jump BB2)
// BB2: 3 -> 4

// 1, 3
NextBasicBlock(prevBB, nextBB):-
	// 1, 2
	BasicBlockHead(prevBB, prevEnd), 
	// 2
	BasicBlockEnd(prevEnd), 
	// 3
	BasicBlockBegin(nextBB), 
	// 2, 3
	IfElse(prevEnd, nextBB).

// merge point
// 1 -> 2 -> 5
// 1 -> 3 -> 5
NextBasicBlock(prevBB, nextBB):-
	// 5
	Merge(nextBB), 
	// 2 | 3
	BasicBlockEnd(prevEnd),
	BasicBlockHead(prevBB, prevEnd),
	// 2, 5 | 3, 5
	(Follows(prevEnd, nextBB);
	_Goto(prevEnd, nextBB);
	_Branch(_, prevEnd, nextBB, _);
	_BranchTable(prevEnd, nextBB, _)).



.decl BBInFunc(insn: Insn, func: Function)

BBInFunc(insn, func):-
	BasicBlockBegin(insn),
	_FuncInsn(func, insn).



.decl LastBB(bb: Insn, func: Function)

LastBB(bb, func):-
	BBInFunc(bb, func),
	!NextBasicBlock(bb, _).



// Dominate relation within function scope 
/**
	A
	| \
	|  B
	| /
	C

	A -> B
	B -> C
	A -> C
**/


.decl NotDominateBB(insn1: Insn, insn2: Insn)

// bb does not dominate start
// A, B
// A, C
NotDominateBB(start, bb):- 
    FuncEntry(func, start), 
    BBInFunc(bb, func),
    bb != start.

// B, C | C, B
NotDominateBB(next, bb):- 
    NotDominateBB(prev, bb), // A, B | A, C
    NextBasicBlock(prev, next), // A, C | A, B
    next != bb. // for the loop



.decl DominateBB(dom: Insn, insn: Insn)

// A, B
// A, C
DominateBB(dominator, bb):-
	BBInFunc(dominator, func),
	BBInFunc(bb, func),
	dominator != bb,
	!NotDominateBB(bb, dominator).



// can be restricted to only when in query (e.g. require_auth and dbOps block)
.decl ReachableInBB(insn1: Insn, insn2: Insn)

ReachableInBB(insn, insn):-
	BasicBlockHead(_, insn).

ReachableInBB(insn, next):-
	ReachableInBB(insn, mid),
	NextInSameBasicBlock(mid, next).





