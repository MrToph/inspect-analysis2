/* EOS related pre-analysis 
e.g.	Actions, DBInsn etc
*/

#if DEBUG
	#if VERBOSE
		.output ActionFuncReachable
		.output CheckTransfer
		.output CheckEOSIO
		.output DBRemove
	#endif
	.output Action
	.output OnTransferAction
	.output OnTransferEOSAction
	.output DBAction
	.output DBInsn
#endif

/* Action Related */
.decl Action(call: Insn, action: Function)

Action(insn, action):-
	_FuncCall(insn, "apply", action),
	_FuncCall(_, action, "read_action_data"). 


.decl ActionFuncReachable(from: Function, to: Function, insn: Insn)

ActionFuncReachable(action, to, insn):-
	Action(_, action),
	_FuncCall(insn, action, to).

ActionFuncReachable(action, to, insn):-
	ActionFuncReachable(action, mid, _),
	_FuncCall(insn, mid, to).



.decl CheckTransfer(insn: Insn, toBranch: Insn)

CheckTransfer(insn, toBranch):-
	_SimpleAssign(_, transferVar, "-3.6171687602778276E18"),
	_AssignVar(_, ifVar, transferVar),
	_Branch(insn, _, toBranch, ifVar).

.decl CheckEOSIO(insn: Insn, toBranch: Insn)

CheckEOSIO(insn, toBranch):-
	_SimpleAssign(_, transferVar, "6.1386635915927654E18"),
	_AssignVar(_, ifVar, transferVar),
	_Branch(insn, _, toBranch, ifVar).


.decl OnTransferAction(call: Insn, action: Function)

OnTransferAction(call, action):-
	Action(call, action),
	CheckTransfer(_, toBranch),
	BasicBlockHead(toBranch, call).

.decl OnTransferEOSAction(call: Insn, action: Function)
OnTransferEOSAction(call, action):-
	OnTransferAction(call, action),
	BasicBlockHead(callHead, call), 
	CheckEOSIO(_, checkedHead),
	DominateBB(checkedHead, callHead).


.decl DBAction(action: Function)

DBAction(action):-
	DBInsn(dbInsn, _),
	ActionFuncReachable(action, _, dbInsn).


/* DB Related */

// DB Remove
// Unlikely called without DB find
// So only consider the find and remove that can be called from the same action

.decl DBRemove(insn: Insn, payer: Var)

DBRemove(removeInsn, payer):-
	ActionFuncReachable(action, "db_remove_i64", removeInsn),
	ActionFuncReachable(action, "db_find_i64", findInsn),
	_ActualArgs(findInsn, _, 3, payer).


.decl _DBInsn(insn: Insn, payer: Var)

_DBInsn(insn, payer):-
	_DBStore(insn, _, payer, _, _);
	_DBUpdate(insn, _, payer, _);
	DBRemove(insn, payer).


.decl DBInsn(insn: Insn, payer: Var)

// if dbOp on self
DBInsn(insn, "_self"):-
	_DBInsn(insn, payer),
	pointer.self.VarPointsToParam(payer).

// if dbOp on code
DBInsn(insn, "_code"):-
	_DBInsn(insn, payer),
	pointer.code.VarPointsToParam(payer),
	!pointer.self.VarPointsToParam(payer).

// else
DBInsn(insn, payer):-
	_DBInsn(insn, payer),
	!pointer.self.VarPointsToParam(payer),
	!pointer.code.VarPointsToParam(payer).


