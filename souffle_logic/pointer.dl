
.comp Pointer {

#if DEBUG
	.output RootVar
	.output IntraCopyAssign
	.output InterCopyAssign
	.output VarPointsTo
	// .output ExtendedRootVar
	// .output ExtendedCopyAssign
	.output ExtendedVarPointsTo
#endif


.decl RootVar(var: Var)

// Root Var includes const, arithmetic result and entry point parameters
RootVar(var):-
	_AssignType(_, var, _),
	!_AssignType(_, var, "Copy"),
	!_AssignType(_, var, "Call").

// Global variable
RootVar("$a").

// Reciever
RootVar("_self").

// Code
RootVar("_code").

// assume uncalled funcation is the entry point
RootVar(var):-
	_FormalArgs(_, func, _, var),
	!_FuncCall(_, _, func).



// copys wihtin function
.decl IntraCopyAssign(insn: Insn, to: Var, from: Var)

IntraCopyAssign(insn, to, from):-
	_AssignVar(insn, to, from),
	_AssignType(insn, to, "Copy"),
	to != "$a".

// load mapping, very crude but enough for checking alias
IntraCopyAssign(insn, to, from):-
	_Load(insn, from, _, to).



// copys include mapping through parameters and return values
.decl InterCopyAssign(to: Var, from: Var)

InterCopyAssign(to, from):-
	IntraCopyAssign(_, to, from).

// argument mapping
InterCopyAssign(to, from):-
	_ActualArgs(_, func, index, from),
	_FormalArgs(_, func, index, to).

// return value mapping
InterCopyAssign(to, from):-
	_FormalReturn(_, func, from),
	_ActualReturn(_, func, to).




.decl VarPointsTo(var1: Var, var2: Var)

// For require_auth, the user should only come from apply(...) or get_self()
// could restrict to use-def chain of require_auth and dbOps vars

// root -> root
VarPointsTo(var, var):-
	RootVar(var).

// Copys
VarPointsTo(to, var):-
	InterCopyAssign(to, from),
	VarPointsTo(from, var).




// inlcuding arithmetic operations
.decl ExtendedRootVar(var: Var)

ExtendedRootVar(var):-
	RootVar(var),
	!_AssignType(_, var, "Add"),
	!_AssignType(_, var, "Sub").



.decl ExtendedCopyAssign(to: Var, from: Var)

ExtendedCopyAssign(to, from):-
	InterCopyAssign(to, from).

ExtendedCopyAssign(to, from):-
	_AssignVar(insn, to, from),
	(_AssignType(insn, to, "Add");
	_AssignType(insn, to, "Sub")).



.decl ExtendedVarPointsTo(var: Var, to: Var)

// root -> root
ExtendedVarPointsTo(var, var):-
	ExtendedRootVar(var).

// Copys
ExtendedVarPointsTo(to, var):-
	ExtendedCopyAssign(to, from),
	ExtendedVarPointsTo(from, var).


// Propagation of parameters in apply including load/store
.comp ApplyParam{
	#if DEBUG
		.output VarPointsToParam
		.output StoreParam
		.output StoreLoadParam
	#endif

	.decl VarPointsToParam(var: Var)

	VarPointsToParam(var):-
		ExtendedVarPointsTo(var, param),
		VarPointsToParam(param).

	// offset with store param insn
	.decl StoreParam(insn: Insn, offset: Var)

	StoreParam(insn, offset):-
		_Store(insn, offset, _, var),
		VarPointsToParam(var).


	.decl StoreLoadParam(storeInsn: Insn, loadInsn: Insn, loadTo: Var)

	// Load from store param by matching offsets
	StoreLoadParam(storeInsn, loadInsn, loadTo):-
		StoreParam(storeInsn, storeOffset),
		_Load(loadInsn, loadOffset, _, loadTo),
		ExtendedVarPointsTo(storeOffset, to),
		ExtendedVarPointsTo(loadOffset, to).



	// reachable from store to load
	.init store_dom_load = CFGDom

	store_dom_load.Src(insn):-
		StoreParam(insn, _).

	store_dom_load.Target (insn):-
		StoreLoadParam(_, insn, _).

	VarPointsToParam(var):-
		StoreLoadParam(store, load, var),
		(store_dom_load.IntraSrcDomTarget(store, load);
		store_dom_load.InterSrcDomTarget(store, load)).
}

// Taint self(reciever)
.init self = ApplyParam

self.VarPointsToParam(var):-
		_FormalArgs(_, "apply", 0, var).

VarPointsTo(var, "_self"):-
	self.VarPointsToParam(var).

// Taint code
.init code = ApplyParam

code.VarPointsToParam(var):-
		_FormalArgs(_, "apply", 1, var).

VarPointsTo(var, "_code"):-
	code.VarPointsToParam(var).



}
