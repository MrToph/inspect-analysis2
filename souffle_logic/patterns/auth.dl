
/*
Three layers:
	Intra-procedural: only check if the DBOps are dominated by require_auth whithin same function
	Inter-procedural: only check if require_auth dominate functions with DBOps (payer variables set mataching)
	Flow sensitive: check if require_auth dominate the function call with the according payer varaible (ordered matching)
*/
	
#define FlowSensitive 1

.init pointer = Pointer

/* Auth Check */

.decl AuthViolation(insn: Insn)
.output AuthViolation

/* Violation: 
1. DB Insn
2. Not preceed by require_auth()
*/


// DB Remove
// Unlikely called without DB find
// So only consider the find and remove that can be called from the same action

.decl ActionFuncReachable(from: Function, to: Function, insn: Insn)
.output ActionFuncReachable

/* 	
	apply(){
		mid();
	}
	mid(){
		action1();
		action2();
		...
	}

*/
ActionFuncReachable(mid, action, insn):-
	_FuncCall(_, "apply", from),
	_FuncCall(_, from, mid),
	_FuncCall(insn, mid, action).

ActionFuncReachable(from, to, insn):-
	ActionFuncReachable(from, mid, _),
	_FuncCall(insn, mid, to).

.decl DBRemove(insn: Insn, payer: Var)
.output DBRemove

DBRemove(removeInsn, payer):-
	ActionFuncReachable(action, "db_remove_i64", removeInsn),
	ActionFuncReachable(action, "db_find_i64", findInsn),
	_ActualArgs(findInsn, _, 3, payer).


.decl _DBInsn(insn: Insn, payer: Var)

_DBInsn(insn, payer):-
	_DBStore(insn, _, payer, _, _);
	_DBUpdate(insn, _, payer, _);
	DBRemove(insn, payer).

.decl DBInsn(insn: Insn, payer: Var)
.output DBInsn

// if db op on self
DBInsn(insn, "_self"):-
	_DBInsn(insn, payer),
	pointer.Self(payer).

DBInsn(insn, payer):-
	_DBInsn(insn, payer),
	!pointer.Self(payer).


// Auth dom dbop wihtin CFG
.init auth_dom_db = CFGDom

auth_dom_db.Src(check):-
	_FuncCall(check, _, "require_auth").

auth_dom_db.Target(target):-
	DBInsn(target, _).

/* Intra-procedural rules*/

.decl SafeIntraDBOps(dbInsn: Insn)
.output SafeIntraDBOps

// only safe if the users are the same in both instructions
SafeIntraDBOps(dbInsn):-
	auth_dom_db.IntraSrcDomTarget(check, dbInsn),
	_ActualArgs(check, "require_auth", 0, authVar),
	DBInsn(dbInsn, payerVar),
	pointer.VarPointsTo(authVar, user),
	pointer.VarPointsTo(payerVar, user).

// Result obtianed from  intra-procedrual analysis
.decl PossibleAuthViolation(insn: Insn)
.output PossibleAuthViolation

PossibleAuthViolation(insn):-
	DBInsn(insn, _),
	!SafeIntraDBOps(insn).



/* Inter-procedural rules*/

.decl AuthVarForDB(authInsn: Insn, var: Var, dbInsn: Insn)
.output AuthVarForDB

AuthVarForDB(check, var, dbInsn):-
	auth_dom_db.InterSrcDomTarget(check, dbInsn),
	_ActualArgs(check, "require_auth", 0, authVar),
	pointer.VarPointsTo(authVar, var).


/* Case:
	Func1(){
		1: require_auth (A) // Auth(A)
		2: Func2(A)
		3: Func2(B)
	}

	Func2(C){
		4: DbOps(C) // C -> A, C -> B
	}

	Expect violation at 4
*/

// If miss some payer auths 

AuthViolation(dbInsn):-
	PossibleAuthViolation(dbInsn),
	!AuthVarForDB(_, to, dbInsn),
	DBInsn(dbInsn, payer),
	pointer.VarPointsTo(payer, to).


/* Flow Sensitive rules*/
#ifdef FlowSensitive

/* Case
	Func1(){
		1: require_auth (B) // Auth(B)
		2: Func2(A) // A
		3: require_auth (A) // Auth(A)
		4: Func2(B) // B
	}
	Func2(C){
		5: Db_insn: Db_Store(C) // C -> A, C -> B
	}

	Expect violation at 5
*/


.decl PayerInFunc(dbInsn: Insn, payerVar: Var, func: Function)
.output PayerInFunc

// payerVar in dbOps
PayerInFunc(dbInsn, payerVar, func):-
	PossibleAuthViolation(dbInsn),
	_FuncInsn(func, dbInsn),
	DBInsn(dbInsn, payerVar).

// All the payer var within the function
PayerInFunc(dbInsn, to, func):-
	PayerInFunc(dbInsn, from, func),
	pointer.IntraCopyAssign(_, from, to).

// capture payer points to if payer is passed by parameters
.decl PayerInFuncCallPointsTo(dbInsn: Insn, to: Var, funcCall: Insn)
.output PayerInFuncCallPointsTo

PayerInFuncCallPointsTo(dbInsn, to, funcCall):-
	PayerInFunc(dbInsn, formalVar, func),
	_FormalArgs(_, func, index, formalVar),
	_ActualArgs(funcCall, func, index, actualVar),
	pointer.VarPointsTo(actualVar, to).

// For mixed order
AuthViolation(dbInsn):-
	PayerInFuncCallPointsTo(dbInsn, to, funcCall),
	!auth_dom_db.SrcDomFunc(check, _, funcCall),
	_ActualArgs(check, "require_auth", 0, authVar),
	pointer.VarPointsTo(authVar, to).

#endif


