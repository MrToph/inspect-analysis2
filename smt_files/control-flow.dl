/*
 *  Copyright 2020 Barracuda Systems Ltd
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

.comp ControlFlow {

    .decl isInstrCallingAnEosFunction(instr:Label)
    //
    // Outputs
    //
    .decl instructionCallers(containingFunction: Label, instruction: Label)

    // Declare outputs
    .output instructionCallers

    instructionCallers(callerSite, instruction) :-
        // Is an instruction called from another function? If so return caller site
        (
            fnInstr(calledFunction, instruction),
            fnCall(callerSite, _, calledFunction)
        );
        // Otherwise, if there is no caller, then this must be a top-level function.
        // Return the top of the function, i.e. function definition, as the caller.
        (
            fnInstr(calledFunction, instruction),
            !fnCall(_, _, calledFunction),
            fnDefinitionArgument(callerSite, calledFunction, "0", _)
        ).

    isInstrCallingAnEosFunction(instr) :-
        fnCall(instr,_,functionCalled),
        isEosFunction(functionCalled).
}