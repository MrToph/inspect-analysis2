/*
 *  Copyright 2020 Barracuda Systems Ltd
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

.comp MissingReqAuthStr : Pattern {
    NAME("Missing Input Validation (Store)")

    DESCRIPTION(STR_JOIN(
                            "Contracts that store values to RAM must check that ",
                            "the payer is authorised to do so."))

    SEVERITY(MEDIUM)

    applicable(context, instruction, line) :-
        controlFlow.instructionCallers(context, instruction),
        isDbStore(instruction),
        line = "placemarker".

    .decl isDbStore(instruction: Label)
    isDbStore(instruction) :-
        dbstore(instruction, _,_,_,_).

    compliance(context, instruction, line, "db_store_i64() is preceded by require_auth() and payer is checked") :-
        applicable(context, instruction, line),
        reqauthMustPrecedeDbstore(context, instruction),
        payerMustHaveAuthChecked(context, instruction).

    .decl reqauthMustPrecedeDbstore(callerContext: Label, dbstoreInstr: Label)
    reqauthMustPrecedeDbstore(callerContext, dbstoreInstr) :-
        hasReqAuth(reqauthInstr),
        mustAnalysis.mustPrecedeEosOnly(reqauthInstr, callerContext, dbstoreInstr).

    /* Check information flow of Payer. This can be ether:
        - Information flow in a single function hence we use flowsToVar() and then get the calling context separately.
        - Or, between funcitions, hence we use the context sensitive flowsToVarBetwFunctions()
    */
    .decl payerMustHaveAuthChecked(callerContext: Label, dbstoreInstr: Label)
    payerMustHaveAuthChecked(callerContext, dbStoreInstr) :-
        fnDefinitionArgument(_,"db_store_i64", "2", payer),
        (
            (
                mustAnalysis.flowsToVar(dbStoreInstr, payer, "require_auth"),      // (Currently inter and intra-function information flows are separate)
                controlFlow.instructionCallers(callerContext, dbStoreInstr)
            );
            mustAnalysis.flowsToVarBetwFunctions(callerContext, dbStoreInstr, payer, "require_auth")
        ).

    /*
        For a given database instruction, this pattern is violated if there's no corresponding require_auth instruction.
        I.e., violation <=> not [exists require_auth instruction that may flow to db_store]
    */
    violation(context, instruction, line, matchComment) :-
        applicable(context, instruction, line),
        fnDefinitionArgument(_,"db_store_i64", "2", payer),
        (!dbStorePayerAuthChecked(context, instruction, payer), matchComment = STR_JOIN("Authorisation for argument '", payer,"' unchecked")).

    .decl dbStorePayerAuthChecked(callerContext: Label, dbstoreInstr: Label, dbpayer:Var)
    dbStorePayerAuthChecked(callerContext, dbstoreInstr, payer2) :-
        isDbStore(dbstoreInstr),
        hasReqAuth(reqauthInstr),
        fnCallArgument(reqauthInstr, _, "0", payer1),
        controlFlow.instructionCallers(callerContext, dbstoreInstr),        // Get the right callerContext for a given dbStore instruction
        (
            mayAnalysis.flowsToVar(dbstoreInstr, payer2, payer1);      // (Currently inter and intra-function information flows are separate)
            mayAnalysis.flowsToVarBetwFunctions(callerContext, dbstoreInstr, payer2, payer1)
        ).

    .decl hasReqAuth(instruction: Label)
    hasReqAuth(instr) :-
        fnCall(instr, _, "require_auth").
}
