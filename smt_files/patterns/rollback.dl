/*
 *  Copyright 2020 Barracuda Systems Ltd
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

.comp Rollback : Pattern {
    NAME("Potential Action Rollback")

    DESCRIPTION(STR_JOIN(
                            "Contract actions that send inline actions or notifications to other contracts ",
                            "are controlled and can selectively be rolled back by these other contracts."))

    SEVERITY(MEDIUM)

    applicable(context, instruction, line) :-
        controlFlow.instructionCallers(context, instruction),
        isInlineAction(instruction),
        line = "placemarker".

    .decl isInlineAction(instruction: Label)
    isInlineAction(instruction) :-
        fnCall(instruction, _, "require_recipient").

    .decl getApply(instruction: Label)
    getApply(instruction) :-
        controlFlow.instructionCallers("head", instruction).

    compliance(context, instruction, line, "SAFE") :-
        applicable(context, instruction, line),
        getApply(applyInstr),
        inlineActionMustBeToSelf(context, instruction, applyInstr).

    .decl inlineActionMustBeToSelf(callerContext: Label, inlineInstr: Label, applyInstr: Label)
    inlineActionMustBeToSelf(callerContext, inlineInstr, applyInstr) :-
        fnCallArgument(inlineInstr, _, "0", recipient2),
        fnDefinitionArgument(applyInstr, _, "0", recipient1),
        ((recipient1 = recipient2, callerContext="head");   // TODO: Fix callerContext to contain correct value
        mustAnalysis.flowsToVarBetwFunctions(callerContext, inlineInstr, recipient1, recipient2)).

    violation(context, instruction, line, STR_JOIN("Inline action to unknown contract")) :-
        applicable(context, instruction, line),
        getApply(applyInstr),
        inlineActionToOther(context, instruction, applyInstr).

    .decl inlineActionToOther(callerContext: Label, inlineInstr: Label, applyInstr: Label)
    inlineActionToOther(callerContext, inlineInstr, applyInstr) :-
        fnCallArgument(inlineInstr, _, "0", recipient2),
        fnDefinitionArgument(applyInstr, _, "0", recipient1),
        (recipient1 != recipient2, callerContext="head"),
        !mayAnalysis.flowsToVarBetwFunctions(callerContext, inlineInstr, recipient2, recipient1).
}
