/*
 *  Copyright 2020 Barracuda Systems Ltd
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

.comp RollbackSendInline : Pattern {
    NAME("Potential Action Rollback (Send Inline)")

    DESCRIPTION(STR_JOIN(
                            "Contract actions that send inline actions or notifications to other contracts ",
                            "are controlled and can selectively be rolled back by these other contracts."))

    SEVERITY(MEDIUM)

    applicable(context, instruction, line) :-
        controlFlow.instructionCallers(context, instruction),
        isInlineAction(instruction),
        line = "placemarker".

    .decl isInlineAction(instruction: Label)
    isInlineAction(instruction) :-
        fnCall(instruction, _, "send_inline").

    .decl getApply(instruction: Label)
    getApply(instruction) :-
        fnDefinitionArgument(instruction, "apply",_,_).

    compliance(context, instruction, line, "send_inline() action is to self.") :-
        applicable(context, instruction, line),
        inlineActionMustBeToSelf(context, instruction).

    .decl inlineActionMustBeToSelf(callerContext: Label, sendInlineInstr: Label)
    inlineActionMustBeToSelf(callerContext, sendInlineInstr) :-
        getApply(applyInstr),
        fnCallArgument(sendInlineInstr, _, "0", memBuffer),
        fnDefinitionArgument(applyInstr, _, "0", recipient),
        (
            (
                mustAnalysis.flowsToVar(sendInlineInstr, memBuffer, recipient),
                controlFlow.instructionCallers(callerContext, sendInlineInstr)
            );
            mustAnalysis.flowsToVarBetwFunctions(callerContext, sendInlineInstr, memBuffer, recipient)
        ).

    violation(context, instruction, line, STR_JOIN("Inline action to unknown contract")) :-
        applicable(context, instruction, line),
        inlineActionToOther(context, instruction).

    .decl inlineActionToOther(callerContext: Label, sendInlineInstr: Label)
    .output inlineActionToOther
    inlineActionToOther(callerContext, sendInlineInstr) :-
        getApply(applyInstr),
        fnCallArgument(sendInlineInstr, _, "0", memBuffer),
        fnDefinitionArgument(applyInstr, _, "0", recipient),
        controlFlow.instructionCallers(callerContext, sendInlineInstr),
        !(
            mayAnalysis.flowsToVar(sendInlineInstr, memBuffer, recipient);
            mayAnalysis.flowsToVarBetwFunctions(callerContext, sendInlineInstr, memBuffer, recipient)
         ).
}
