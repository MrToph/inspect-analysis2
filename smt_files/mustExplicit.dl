/*
 *  Copyright 2020 Barracuda Systems Ltd
 *  Copyright 2018 Secure, Reliable, and Intelligent Systems Lab, ETH Zurich
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file has been modified by Barracuda Systems Ltd to add support for WebAssembly and EOSIO blockchains.
 *
 */

/*
 * MustAnalysis
 * Design objectives:
 * - Calculate Var must point-to relations. As this is a must analysis (or definite analysis) it under-approximates to
 * make sure that the computed alias relationships are guaranteed to always hold during program execution.
 * - May analysis did not have instruction sensitivity allowing it to infer more facts. For must analysis we add
 * instruction sensitivity to allow for more definite results.
 * - phi-nodes need to be considered for dataflow (we ignored them in may analysis to allow over approximation)
 * - Stop propagation of mem/db for every write to a location
 * - Use decompiled inputs for taints, function calls and returns

 * CHECK: True for Must?
 * - Propagate Var points-to based on instruction flow (may see later if need to make this stricter by stopping
 * propagation everytime there is an assignment to a variable. Strangely Securify does this for storage and mem)
 * - Have exception flowing in the same manner as Var points-to
 */


.comp MustExplicitAnalysis {
    #include "interfunction.dl"
    //
    // Derived
    //
    .decl reassignDatabase    (l: Label, v: Var)
    .decl removeDatabase    (l: Label, v: Var)
    .decl mustPrecedeStep    (l1: Label, l2: Label)
    .decl mstoreOffsetsPropagtd (l: Label, dynOffset:Var, memargOffset:Var, f:Var)
    .decl mloadOffsetsPropagtd (l: Label, dynOffset:Var, memargOffset:Var, f:Var)
    .decl memcpyOffsetsPropagtd (l: Label, destOffset:Var, srcOffset:Var)

    //
    // Outputs
    //
    .decl flowsToVar           (l: Label, v: Var, f: Var)
    .decl flowsToMem        (l: Label, dynOffset: Var, memargOffset: Var, f:Var)
    .decl database            (instr: Label, iterator: Var, payer:Var, f: Var)
    .decl mustPrecede        (l1: Label, l2: Label)
    .decl functionAssign    (l: Label, v1: Var, v2: Var)

    // Declare outputs
    .output flowsToVar
    .output flowsToMem
    .output database
    .output mustPrecede
    .output functionAssign

    // Temp debug
    .output mustPrecedeStep

    //
    // Control flow rules
    //

    // Propagate follows. Do not include instructions that are tags as it is not 100% clear what preceding
    // instruction is (tag indicates a branch).
    //  If instruction To follows instruction From, and
    //  If To is not a branch destination,
    //  Then infer that To MustPrecede From by 1 step.
    mustPrecedeStep(From, To) :- follows(From, To),
                                 !tag(To).

    // Contrary to prior mustPrecedeStep, if conditional execution has only a single destination point then we are
    // certain what the preceding instruction is.
    //
    //  If there is a jump from instruction From to Mid, and
    //  If Mid is tagged as being a branch with only one incoming branch,
    //  Then, infer that Mid mustPrecede From.
    mustPrecedeStep(From, Mid) :- jump(From, Mid, _), oneBranchTag(Mid).

    // TODO: If the jump is a function call then this is unconditional in one direction. But we don't know exactly where it comes from?
    // mustPrecedeStep(From, Mid) :- jump(From, Mid, _), fnCall

    // For If/Else/End blocks if there is a jump from instruction From to Mid, and
    // If both From and End are the beginning and end of the If block respectively,
    // Then, infer that From always precedes Mid.
    mustPrecedeStep(From, Mid) :- jump(From, Mid, End),
                                  endIf(From, End).

    // Convert mustPrecedeStep into mustPrecede facts
    mustPrecede(From, To) :- mustPrecedeStep(From, To).
    mustPrecede(From, To) :- mustPrecede(From, Mid),
                             mustPrecedeStep(Mid, To)/*,
                             (controlFlow.isInstrCallingAnEosFunction(From); // Can optionally enable these if need to limit size of tuples
                              controlFlow.isInstrCallingAnEosFunction(To))*/.

    /*---
     Information Flow
    ---*/
    // Convert each assignment into flows to rule with instruction context.
    flowsToVar(Lab, Var, Fact) :- assignVar(Lab, Var, Fact).
    // Rex: ?
    // flowsToVar(Lab, Var, Fact) :- assignType(Lab, Var, Fact).
    flowsToVar(Lab, Var, Fact) :- throw(Lab, Fact, Var).

    // Propagate information flow from source to destination considering control flow
    flowsToVar(LabDest, VarDest, VarFactSrc) :-
        flowsToVar(LabSrc, VarIntermediate, VarFactSrc),
        assignVar(LabDest, VarDest, VarIntermediate),
        mustPrecede(LabSrc, LabDest).


    //  If two paths originating at LabSrc1 and LabSrc2 merge at LabDest, and
    //  If fact Fact reaches Var at both LabSrc1 and LabSrc2,
    //  Then, infer that Fact reaches Var at the intersection point LabDest.
    flowsToVar(LabDest, Var, Fact) :- join(LabSrc1, LabSrc2, LabDest),
                                      inFunction(LabSrc1, Function), // Makes sure that only counts joins in the same function
                                      inFunction(LabSrc2, Function), // TODO: This is a kludge. Maybe don't have join rule for function calls?
                                      inFunction(LabDest, Function),
                                      flowsToVar(LabSrc1, Var, Fact),
                                      flowsToVar(LabSrc2, Var, Fact).


    // Facts flow between another in two ways.
    // 1. Within a function inputs to a fn call flow to the output of that fn call.
    // 2. Between functions, information flows from the function call to its definition. Below is the 2nd part
    flowsToVar(Lab, VarDest, VarSrc) :-
        functionAssign(Lab, VarDest, VarSrc).

    flowsToVar(Lab, VarDest, FactSrc) :-
        flowsToVar(_, Var, FactSrc),
        functionAssign(Lab, VarDest, Var).

    //
    // Inter function CallGraph rules
    //

    functionAssign(Lab, VarTo, VarFrom) :- fnDefinitionArgument(_, FnName, ArgIndex, VarTo),
                                           (VarTo != "null"),
                                           fnCallArgument(Lab, FnName, ArgIndex, VarFrom).

    functionAssign(Lab, VarTo, VarFrom) :- fnDefinitionRtn(_, FnName, VarFrom),
                                           fnCallRtn(Lab, FnName, VarTo).

    /**
     * Memory and EOS RAM (i.e. database) rules
     * As this is Must analysis we under-approximate by taking a very narrow applicability of
     * mem/db access across instructions.
    */
    // The two offsets may have different values depending on how variables propagate to them.
    // Work out all possible combinations.
    mloadOffsetsPropagtd(LabMem, DynOffsetSrc, MemargOffset, Fact) :-
        mload(LabMem, DynOffset, MemargOffset, Fact),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, DynOffset, DynOffsetSrc).

    mloadOffsetsPropagtd(LabMem, DynOffset, MemargOffsetSrc, Fact) :-
        mload(LabMem, DynOffset, MemargOffset, Fact),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, MemargOffset, MemargOffsetSrc).

    mstoreOffsetsPropagtd(LabMem, DynOffsetSrc, MemargOffset, Fact) :-
        mstore(LabMem, DynOffset, MemargOffset, Fact),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, DynOffset, DynOffsetSrc).

    mstoreOffsetsPropagtd(LabMem, DynOffset, MemargOffsetSrc, Fact) :-
        mstore(LabMem, DynOffset, MemargOffset, Fact),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, MemargOffset, MemargOffsetSrc).

    memcpyOffsetsPropagtd(LabMem, DestOffsetPropgtd, SrcOffset) :-
        memcpy(LabMem, DestOffset, SrcOffset),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, DestOffset, DestOffsetPropgtd).

    memcpyOffsetsPropagtd(LabMem, DestOffset, SrcOffsetPropgtd) :-
        memcpy(LabMem, DestOffset, SrcOffset),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, SrcOffset, SrcOffsetPropgtd).

    flowsToMem(Lab, DynOffset, MemargOffset, Var) :-
        mstoreOffsetsPropagtd(Lab, DynOffset, MemargOffset, Var).

    /* Propagate facts to memory effective addresses (dynamic offset + memarg.offest).
     * For Must analysis we under-approximate by only including info flows that follow control flow.
     *
     *  If have stored a variable, Var, at memory offset, Offset, and
     *  If type Type reaches that Var,
     *  Then, infer that Fact reaches that memory location Offset.
     */
    flowsToMem(LabMem, DynOffset, MemargOffset, Fact) :-
        mstoreOffsetsPropagtd(LabMem, DynOffset, MemargOffset, Var),
        mustPrecede(Lab, LabMem),
        flowsToVar(Lab, Var, Fact).

    /* Propagate for memcpy */
    flowsToMem(LabCpy, DestOffset, MemargOffset, Fact) :-
        flowsToMem(LabMem, SrcOffset, MemargOffset, Fact),
        mustPrecede(LabMem, LabCpy),
        memcpyOffsetsPropagtd(LabCpy, DestOffset, SrcOffset).

    /* Propagate Facts for memory reads.
     * Loading contents from memory address [DynOffset, MemargOffset] into Var, and
     * If a Var flowed into the same address, then Var flows through that memory into Var.
     */
    flowsToVar(LabLoad, Var, Var) :-
        flowsToMem(LabMem, DynOffset, MemargOffset, Var),   // e.g. mstore(DynOffset, MemargOffset) <= Var
        mustPrecede(LabMem, LabLoad),
        mloadOffsetsPropagtd(LabLoad, DynOffset, MemargOffset, Var).           // Var = mload(DynOffset, MemargOffset)

    //  If at instruction Lab, load memory at offset Offset with Variable Var, and
    //  If, memory at the same instruction Lab and same offset Offset has a Type, and
    //  If, the offset is not unkown,
    //  Then infer that the Var at instruction Labd has a type Type.
    /* assignType(Lab, Var, Type) :- mload(Lab, DynOffset, MemargOffset, Var),
                                  memory(Lab, DynOffset, MemargOffset, Type),
                                  !unk(DynOffset).
    */

    database(Lab, Itr, Payer, Type) :- dbstore(Lab, Itr, Payer, _, Var),
                                        flowsToVar(Lab, Var, Type),
                                        ! unk(Itr).

    database(LabTo, Itr, Payer, Type) :- mustPrecedeStep(LabFrom, LabTo),
                                        database(LabFrom, Itr, Payer, Type),
                                        ! reassignDatabase(LabTo, Itr),
                                        ! removeDatabase(LabTo, Itr).

    database(LabTo, Itr, Payer, Type) :- join(LabFrom1, LabFrom2, LabTo),
                                        database(LabFrom1, Itr, Payer, Type),
                                        database(LabFrom2, Itr, Payer, Type),
                                        ! unk(Itr).

    reassignDatabase(Lab, Itr) :- dbupdate(Lab, Itr, _, _).

    removeDatabase(Lab, Itr) :- dbremove(Lab, Itr).

    assignType(Lab, Var, Type) :- dbget(Lab, Itr, Var),
                                  database(Lab, Itr, _, Type),
                                  ! unk(Itr).

}