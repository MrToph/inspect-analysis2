/*
 *  Copyright 2020 Barracuda Systems Ltd
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#define ENABLE_INPUT_FROM_FILES


.type Var <: symbol
.type Index <: symbol

.type Label <: symbol
.type Instruction <: symbol
.type Function <: symbol
.type Element = Label | Instruction | Function      // any program element

//
// Inputs
// May and Must facts are equivalent with the exception of follows, join & jump. In addition taint only exists for May.
// TODO: Consolidate the facts in Java Dataflow
//
.decl assignType    (label: Label, var: Var, type: symbol)
GET_REL_FROM_FILE(assignType, "must/assignType.facts")

.decl assignVar		(label: Label, to: Var, from: Var)
GET_REL_FROM_FILE(assignVar, "must/assignVar.facts")

// Linear following instructions as well as branches
.decl follows		(prev: Label, next: Label)
GET_REL_FROM_FILE(follows, "must/follows.facts")

// Rex: Needs to be clarified
// l1: jump l3
// l2: something
// l3: ... 
.decl jump		    (from: Label, l2: Label, l3: Label)
GET_REL_FROM_FILE(jump, "must/jump.facts")

// Rex: Needs to be clarified
// Where several branches join. Different to tag how? 
.decl join		    (l1: Label, l2: Label, l3: Label)
// A B C
//   D

// D A
// D B
// D C
GET_REL_FROM_FILE(join, "must/join.facts")

// Rex: Needs to be clarified

/* May Analysis control flow:
// The branch condition, cond, from label, l1, taints the instruction at label, l2
// E.g. taint(if_label, else_label/end_label, if_condition) */
.decl taint		    (ifInst:Label, labThenElseInstr:Label, cond:Var)
GET_REL_FROM_FILE(taint, "may/taint.facts")

// Rex: Return Statment?
// Branch destination
.decl tag           (l1: Label)
GET_REL_FROM_FILE(tag, "must/tag.facts")

.decl oneBranchTag  (l1: Label)
GET_REL_FROM_FILE(oneBranchTag, "must/oneBranchTag.facts")

// End of branch (not used in original Must analysis)
.decl endIf		    (ifInst: Label, end: Label)
GET_REL_FROM_FILE(endIf, "must/endIf.facts")

.decl mload		    (label: Label, dynOffset:Var, memargOffset:Var, f:Var)
GET_REL_FROM_FILE(mload, "must/mload.facts")

.decl mstore		(label: Label, dynOffset:Var, memargOffset:Var, f:Var)
GET_REL_FROM_FILE(mstore, "must/mstore.facts")

.decl memcpy		(label: Label, destOffset:Var, srcOffset:Var)
GET_REL_FROM_FILE(memcpy, "must/memcpy.facts")

// Rex: is var the row in the table?
.decl dbget		    (label: Label, var:Var, itr:Var)
GET_REL_FROM_FILE(dbget, "must/dbget.facts")

.decl dbstore		(label: Label, itr:Var, payer:Var, key:Var, data:Var)
GET_REL_FROM_FILE(dbstore, "must/dbstore.facts")

.decl dbupdate        (label: Label, itr: Var, payer: Var, data: Var)
GET_REL_FROM_FILE(dbupdate, "must/dbupdate.facts")

.decl dbremove		(label: Label, itr:Var)
GET_REL_FROM_FILE(dbremove, "must/dbremove.facts")

.decl unk	        (unkown: Var)
GET_REL_FROM_FILE(unk, "must/unk.facts")

.decl throw		    (label: Label, f:Var, v:Var)
GET_REL_FROM_FILE(throw, "must/throw.facts")

// Not sure this is easy to extract a priori? Alternative is to do in datalog, but could be messy
.decl fnCallGraph       (fnFrom: Function, fnTo: Function)
GET_REL_FROM_FILE(fnCallGraph, "must/fnCallGraph.facts")

// Mapping of each instruction to its containing function
.decl fnInstr   (fnName: Function, instr: Label)
GET_REL_FROM_FILE(fnInstr, "must/fnInstr.facts")

// For a formal function definition. Shows which variable is an argument of the
// function at a certain index, i.e. n-th argument
.decl fnDefinitionArgument   (fnDef:Label, fnName: Function, index: Index, arg: Var)
GET_REL_FROM_FILE(fnDefinitionArgument, "must/fnDefinitionArgument.facts")

// For a formal function definition. Return value of the function.
.decl fnDefinitionRtn   (fnDef:Label, fnName: Function, return: Var)
GET_REL_FROM_FILE(fnDefinitionRtn, "must/fnDefinitionRtn.facts")

// Function call from given label i.e. invocation site
.decl fnCall            (callSite:Label, fromFn:Function, toFn:Function)
GET_REL_FROM_FILE(fnCall, "must/fnCall.facts")

// Captures the actual arguments at the invocation of a function
.decl fnCallArgument      (callSite: Label, fnName: Function, index: Index, arg: Var)
GET_REL_FROM_FILE(fnCallArgument, "must/fnCallArgument.facts")

// Captures the actual return value at the invocation of a function
.decl fnCallRtn   (callSite: Label, fnName: Function, return: Var)
GET_REL_FROM_FILE(fnCallRtn, "must/fnCallRtn.facts")