/*
 *  Copyright 2020 Barracuda Systems Ltd
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

.type PatternId <: symbol

/** Numeric Match ID (note [[PatternBase]]'s MatchId will be translated via ord(X)) */
.type MatchId <: number 
.type MatchType <: symbol
.type MatchComment <: symbol

// Match Types
#define WARNING   "warning"
#define VIOLATION "violation"
#define COMPLIANT "compliant"
#define CONFLICT  "conflict"

// Converts anything to a numeric match ID
#define MATCH(x) ord(x)

.comp PatternBase<MatchId> {
    /** Stores information about the pattern such as name, description and custom tags. */
    .decl tag(tag: symbol, value: symbol)

    .decl matchId(contextId:MatchId, matchId: MatchId)
    .decl matchType(contextId:MatchId, matchId: MatchId, type: MatchType)
    .decl matchInfo(contextId:MatchId, matchId: MatchId, key: symbol, value: symbol)
}

.comp Pattern : PatternBase<Element> {
    .decl applicable(context: Element, element: Element, info: symbol)
    .decl compliance(context: Element, element: Element, info: symbol, comment: symbol)
    .decl violation(context: Element, element: Element, info: symbol, comment: symbol)

    // TODO DEBUG
    .output applicable
    .output compliance
    .output violation

    matchId(context, element) :-
        (
            applicable(context, element, _);
            compliance(context, element, _, _);
            violation(context, element, _, _)
        ).

    matchType(context, element, WARNING) :-
        applicable(context, element, _),
        !compliance(context, element, _, _),
        !violation(context, element, _, _).

    matchType(context, element, COMPLIANT) :-
        applicable(context, element, _),
        compliance(context, element, _, _),
        !violation(context, element, _, _).

    matchType(context, element, VIOLATION) :-
        applicable(context, element, _),
        !compliance(context, element, _, _),
        violation(context, element, _, _).

    matchType(context, element, CONFLICT) :-
        applicable(context, element, _),
        compliance(context, element, _, _),
        violation(context, element, _, _).

    matchInfo(context, element, "element", element) :-
        applicable(context, element, _).

    /*
    matchInfo(element, "line", line) :-
        applicable(element, _), sourceLine(element, line).

    matchInfo(element, "loc", line) :-
        applicable(element, _), sourceInfo(element, "loc", line).

    matchInfo(element, "contract", contract) :-
        applicable(element, _), sourceInfo(element, "contract", contract).
    */

    matchInfo(context, element, "comment", comment) :-
        matchType(context, element, COMPLIANT),
        compliance(context, element, _, comment).

    matchInfo(context, element, "comment", comment) :-
        matchType(context, element, VIOLATION),
        violation(context, element, _, comment).

    matchInfo(context, element, "comment", comment) :-
        matchType(context, element, CONFLICT),
        (
            compliance(context, element, _, comment);
            violation(context, element, _, comment)
        ).
}

.decl patternId(patternId: PatternId)
.decl patternTag(patternId: PatternId, tag: symbol, value: symbol)

.decl patternMatch(patternId: PatternId, matchId: MatchId, matchType: MatchType)
.decl patternMatchInfo(patternId: PatternId, matchId: MatchId, context: symbol, key: symbol, value: symbol)

/* patternMatch(#TPat, ord(m), t) :- pattern ## TPat.matchType(c, m, t). \
patternMatchInfo(#TPat, ord(m), t, v) :- pattern ## TPat.matchInfo(c, m, t, v). */

patternTag(id, "id", id) :- patternId(id).

#include "analysis-patterns-macros.dl"
#include "patterns/missing-require-auth-s.dl"
#include "patterns/missing-require-auth-u.dl"
#include "patterns/missing-require-auth-r.dl"
#include "patterns/rollback.dl"
#include "patterns/rollback-send-inline.dl"

REGISTER_PATTERN(MissingReqAuthStr)
REGISTER_PATTERN(MissingReqAuthUpd)
REGISTER_PATTERN(MissingReqAuthRem)
REGISTER_PATTERN(Rollback)
REGISTER_PATTERN(RollbackSendInline)

.output patternId
.output patternTag
.output patternMatch
.output patternMatchInfo

LOG(patternMatch)
LOG(patternMatchInfo)