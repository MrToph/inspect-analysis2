// Inter-procedural
// 1-call-site sensitive
// Context = Caller function name

// How to handle function loop up ?

/* Information Flow */

// Init
VarPointsTo(ctx, var, heap):-
	Alloc(var, heap),
	ctx=?.

// Copy
VarPointsTo(ctx, to, heap):-
	Move(to, from),
	VarPointsTo(ctx, from, heap).

// Other data structures: field, array etc.

// Args Mapping
CallGraph(insn, callerCtx, fromFunc), // Track the caller context
VarPointsTo(fromFunc, arg, heap):-
	FuncCall(insn, fromFunc, toFunc), 
	FormalArgs(_, func, index, arg), 
	ActualArgs(insn, func, index, src),
	VarPointsTo(callerCtx, src, heap).

// Return Mapping
/* if the return var is derived from the function arguement,
its ctx should be the same as the args(i.e. calleeCtx)
*/
VarPointsTo(callerCtx, to, heap):-
	AssignReturn(insn, to),
	FuncCall(insn, func),
	Return(var, func), 
	CallGraph(insn, callerCtx, calleeCtx),
	VarPointsTo(calleeCtx, var, heap).


/* Control Flow */

// Inter-procedural

FuncEntry(func, firstInsn).

// First Instruction, Begin of function, If/Else block
BasicBlockBegin(insn):-
	FuncEntry(_, insn). // Not sure if needed for every function

BasicBlockBegin(to):-
	Jump(_, to),
	!Return(to).

// BB: 1 -> 2 -> 3

// 1, 2
// 2, 3
NextInSameBasicBlock(insn, next):-
	Follows(insn, next),
	!BasicBlockBegin(next).


// 1, 1
// 1, 2
// 1, 3
BasicBlockHead(insn, insn):-
	BasicBlockHeadBegin(insn).

BasicBlockHead(head, next) :-
   BasicBlockHead(head, insn),
   NextInSameBasicBlock(insn, next).

// 3
BasicBlockEnd(end):-
	BasicBlockHead(_, end),
	!NextInSameBasicBlock(end, _).

// Constructing CFG of instructions
// Assuming Jump is the only constrol transfer
NextInsn(insn, next):-
	Follows(insn, next),
	!Jump(insn, next).

NextInsn(insn, next):-
	Jump(insn, next),
	!FunctionCall(insn, _).

// Constructing CFG of basic blocks
// BB1: 1 -> 2(jump BB2)
// BB2: 3 -> 4

// 1, 3
NextBasicBlock(prevBB, nextBB):-
	BasicBlockHead(prevBB, prevEnd) // 1, 2
	BasicBlockEnd(prevEnd), // 2
	BasicBlockBegin(nextBB), // 3
	NextInsn(prevEnd, nextBB). // 2, 3

BBInFunc(insn, func):-
	BasicBlockBegin(insn),
	FuncInsn(func, insn).


// Dominate relation within function scope 
/**
	A
	| \
	|  B
	| /
	C

	A -> B
	B -> C
	A -> C
**/

// bb does not dominate start
// B, A
// C, A
NotDominateBB(bb, start):- 
    FuncEntry(func, start), 
    BBInFunc(bb, func),
    bb != start.

// B, C | C, B
NotDominateBB(next, bb):- 
    NotDominateBB(bb, prev), // B, A | C, A
    NextBasicBlock(prev, next), // A, C | A, B
    next != bb. // for the loop

// A, B
// A, C
DominateBB(dominator, bb):-
	BBInFunc(dominator, func),
	BBInFunc(bb, func),
	!NotDominateBB(dominator, bb).


ReachableBB(bb, bb):-
	BasicBlockBegin(bb).

ReachableBB(bb, next):-
	ReachableBB(bb, mid),
	NextBasicBlock(mid, next).

/* Patterns */
// "_" short for possible in relation

/* Numerical Overflow */

/* Violation:
1. Action parameters/ DB data 
2. Math Ops (Could also be stricted ro reachable to db_store)
3. Vars are not in eosio_assert 
*/

// Possible source of overflow operation
// a = 1
_OverflowSrc(var):-
	FormalArgs( _, _, _, var);
	DBLoad(_, var, _).

_OverflowSrc(to):-
	_OverflowSrc(src),
	CopyAssign(to, src).

// b 
_OverflowSrc(var):-
	_OverflowInsn(var).

// Possible overflow instruction
// b = a + 1
// c = b + 1
_OverflowInsn(insn, to):-
	_OverflowSrc(src),
	AssignType(insn, to, src, opt),
	opt = "Add";
	opt = "Sub".

// Asset opt override
NoOverflow(insn):-
	_OverflowInsn(insn, var),
	Follows(insn, next),
	ActualArgs(next, "eosio_assert", _, var).

Violation(insn):-
	_OverflowInsn(insn),
	!NoOverflow(insn).


/* Auth Check */

/* Violation: 
1. DB Insn
2. Not preceed by require_auth()
*/

SafeDBOps(insn):-
	ActualArgs(check, "require_auth", _, payer1),
	DBOps(insn, payer2),
	VarPointsTo(payer1, mem),
	VarPointsTo(payer2, mem),
	Dominate(check, insn).

Violation(insn):-
	DBOps(insn),
	!SafeDBOps(insn).


/* Rollback */

/* Violation: 
1. Inline Action / Require Recipient?
2. Not to self

Tracking the first 64 bits could be tricky
*/

SafeInline(check):-
	ActualArgs(check, "send_inline", "0", receiver), // could limit to only reachable from db_store
	VarPointsTo(receiver, first64bits),
	first64bits = "receiver". // self, apply(receiver)

Violation(insn):-
	FuncCall(insn, "send_inline"),
	!SafeInline(insn).


/** Unbounded Iterations **/
/* Violation: 
1. Check iterator in while condition
2. No other restriction (e.g. time, counter)
*/

/** TODO: Low Priority **/


/* Seperation of Action and Notification */
/* Violation
1. on_notify function (can also restrict to "transfer" if available)
2. can be reached when reciever == code in apply()
*/

NotifyFunc(func, start, insn):-
	IsNotifyFunc(func), // something from the decompiler
	FormalArgs(start, func, _, _), // start of the function
	FuncCall(insn, "db_store | send_inline"), // Can also only consider within "on_notify" func for performance
	Reachable(start, insn).

// notify function call within/reachable from apply

// apply(){
//	switch(){
//		case:
// insn		notify()
//	}
//}
NotifyFuncCall(insn):-
	NotifyFunc(func, _, _),
	FuncCall(insn, func),
	FuncInsn(insn, "apply").

Violation(insn):-
	NotifyFuncCall(insn),
	FormalArgs(_, "apply", 0, reciever),
	FormalArgs(_, "apply", 1, code),
	(IfCond(ifInsn, reciever, code); // reciever == code
	!IfCond(ifInsn, reciever, _)), // No checking
	Reachable(ifInsn, insn),

/* Fake token transfers */

/* Violation:
1. on_notify function (can also restrict to "transfer" if available)
2. code is not checked 
*/

NotifyFuncCall(insn).

SafeToken(insn):-
	NotifyFuncCall(insn),
	FormalArgs(_, "apply", 1, code),
	IfCond(ifInsn, code, "eosio::token"), // if it is availble from decompiler
	Dominate(ifInsn, insn).

Violation(insn):-
	NotifyFuncCall(insn),
	!SafeToken(insn).


/* Fake Notification */

/* Violation:
1. on_notify function (can also restrict to "transfer" if available)
2. from != self and to != self
3. reachable to db_store / send_inline
*/

NotifyFunc(func, start, insn).

// Assume user only checks the parameters
SafeNotify(start):-
	NotifyFunc(func, start, insn),
	FormalArgs(_, func, 0 | 1, var), // "0" => from | "1" => to
	IfCond(ifInsn, var, "0"), 
	Reachable(start, ifInsn),
	Dominate(ifInsn, insn). // could be assumed always after if for performance

Violation(insn):-
	NotifyFunc(_, start, insn),
	SafeNotify(start).







